@startuml
enum org.derryclub.linebot.commands.PreGameCommand {
+  HELP
+  START
+  SYSTEM
- String description
- String command
+ String getDescription()
+ String getCommand()
+ List<String> getCommandList()
+ Optional<Command> findCommand(String)
}
class org.derryclub.linebot.poker.analyzer.Classification {
- ClassificationRank classificationRank
- SortedSet<Card> classifiedCards
+ SortedSet<Card> getClassifiedCards()
+ ClassificationRank getClassificationRank()
+ String toString()
}
class org.derryclub.linebot.processor.EmojiProcesser {
- {static} String EMOJI_ID
- {static} String SPADE_ID
- {static} String HEART_ID
- {static} String CLOVER_ID
- {static} String DIAMOND_ID
+ {static} TextMessage process(String)
}
enum org.derryclub.linebot.game.GameConstant {
+  SmallBlind
+  BigBlind
+  BigBlindPlus1
+  BigBlindPlus2
+  BigBlindPlus3
+  BigBlindPlus4
+  BigBlindPlus5
+  BigBlindPlus6
+  Blind
- int value
+ int getValue()
}
enum org.derryclub.linebot.poker.analyzer.PokerHandUtils {
+ {static} int TIE
~ {static} List<Card> ROYAL_FLUSH_SPADES
~ {static} List<Card> ROYAL_FLUSH_HEARTS
~ {static} List<Card> ROYAL_FLUSH_CLUBS
~ {static} List<Card> ROYAL_FLUSH_DIAMONDS
~ {static} List<Card> STRAIGHT_WHEEL_SPADES
~ {static} List<Card> STRAIGHT_WHEEL_HEARTS
~ {static} List<Card> STRAIGHT_WHEEL_CLUBS
~ {static} List<Card> STRAIGHT_WHEEL_DIAMONDS
~ {static} List<Rank> STRAIGHT_TWO_TO_SIX
~ {static} List<Rank> STRAIGHT_THREE_TO_SEVEN
~ {static} List<Rank> STRAIGHT_FOUR_TO_EIGHT
~ {static} List<Rank> STRAIGHT_FIVE_TO_NINE
~ {static} List<Rank> STRAIGHT_SIX_TO_TEN
~ {static} List<Rank> STRAIGHT_SEVEN_TO_JACK
~ {static} List<Rank> STRAIGHT_EIGHT_TO_QUEEN
~ {static} List<Rank> STRAIGHT_NINE_TO_KING
~ {static} List<Rank> STRAIGHT_TEN_TO_ACE
+ {static} void checkHandClassification(Hand,ClassificationRank)
+ {static} Classification classifyPokerHand(RankGroup,SuitGroup,SortedSet<Card>)
}
interface org.derryclub.linebot.poker.analyzer.HandClassifier {
~ Classification classify()
}
class org.derryclub.linebot.card.Card {
- Rank rank
- Suit suit
- {static} Map<String,Card> CARD_CACHE
+ Rank getRank()
+ Suit getSuit()
- {static} Map<String,Card> initCache()
- {static} String cardKey(Rank,Suit)
+ {static} Card getCard(Rank,Suit)
+ String toString()
+ int hashCode()
+ boolean equals(Object)
+ int compareTo(Card)
}
enum org.derryclub.linebot.card.Rank {
+  TWO
+  THREE
+  FOUR
+  FIVE
+  SIX
+  SEVEN
+  EIGHT
+  NINE
+  TEN
+  JACK
+  QUEEN
+  KING
+  ACE
- String rankValueString
- int rankValue
+ int getRankValue()
+ String toString()
}
class org.derryclub.linebot.processor.GameController {
- {static} Set<String> gameCommands
- {static} HashMap<String,Map<Player,Integer>> potMap
- {static} HashMap<String,Set<Player>> playersInTheGroup
- {static} Map<String,Game> gameMap
- {static} HashMap<String,List<Card>> communityCardsMap
- {static} HashMap<String,Set<Player>> tablePos
+ {static} Map<Player,Integer> getPotMap(String)
- {static} Player getPlayer(String,Set<Player>)
+ {static} int getPotPool(String)
+ {static} Set<Player> getPlayersInTheGroup(String)
+ {static} List<Card> getCommunityCard(String)
+ {static} Game create(String)
+ {static} Message handle(MessageEvent<TextMessageContent>)
- {static} String gamePreflop(Deck,List<Card>)
- {static} String dealTurnAndRiverCards(Deck,List<Card>)
- {static} String positionMessage(Game,Set<Player>)
- {static} void dealtHoleCards(Set<Player>,Deck)
- {static} boolean addPlayer(MessageEvent<TextMessageContent>)
- {static} boolean removePlayer(MessageEvent<TextMessageContent>)
+ {static} Map<String,Game> getGameMap()
+ {static} int getOngoingGame()
+ {static} boolean isGameExist(MessageEvent<TextMessageContent>)
}
class org.derryclub.linebot.card.Deal {
+ {static} Card getCard(Deck)
}
interface org.derryclub.linebot.poker.analyzer.HandAnalyzer {
~ SortedSet<Card> getCards()
~ Classification getClassification()
~ RankGroup getRankGroup()
~ SuitGroup getSuitGroup()
}
class org.derryclub.linebot.poker.analyzer.PokerHandComparator {
+ int compare(Hand,Hand)
- {static} int compareRoyalFlushHands(Hand,Hand)
- {static} int compareStraightFlushHands(Hand,Hand)
- {static} int compareStraightFlushWheelHands(Hand,Hand)
- {static} int compareQuadsHands(Hand,Hand)
- {static} int compareRanks(Iterator<Map.Entry<Rank,List<Card>>>,Iterator<Map.Entry<Rank,List<Card>>>)
- {static} int iterateAndCompareHighCard(Iterator<Map.Entry<Rank,List<Card>>>,Iterator<Map.Entry<Rank,List<Card>>>)
- {static} int compareFullHouse(Hand,Hand)
- {static} int compareFlushHands(Hand,Hand)
- {static} int compareStraightHands(Hand,Hand)
- {static} int compareWheelHands(Hand,Hand)
- {static} int compareSetHands(Hand,Hand)
- {static} int compareTwoPairHands(Hand,Hand)
- {static} int comparePairHands(Hand,Hand)
- {static} int compareHighCardHands(Hand,Hand)
+ {static} int compareHandClassifications(Hand,Hand)
}
class org.derryclub.linebot.poker.analyzer.RankGroup {
- Map<Rank,List<Card>> rankMap
- int quadCount
- int setCount
- int pairCount
+ Map<Rank,List<Card>> getRankMap()
~ int getQuadCount()
~ int getSetCount()
~ int getPairCount()
- int groupCount(int)
- {static} Map<Rank,List<Card>> initRankGroup(SortedSet<Card>)
+ Iterator<Map.Entry<Rank,List<Card>>> iterator()
}
enum org.derryclub.linebot.poker.analyzer.ClassificationRank {
+  HIGH_CARD
+  PAIR
+  TWO_PAIR
+  SET
+  WHEEL
+  STRAIGHT
+  FLUSH
+  FULL_HOUSE
+  FOUR_OF_A_KIND
+  STRAIGHT_FLUSH_WHEEL
+  STRAIGHT_FLUSH
+  ROYAL_FLUSH
- int value
+ int getValue()
}
class org.derryclub.linebot.card.Deck {
- Stack<Card> deckCards
- Stack<Card> initDeck()
+ {static} Deck newShuffledSingleDeck()
+ int size()
+ boolean contains(Card)
+ Optional<Card> deal()
}
class org.derryclub.linebot.LineMessageAPI {
+ Message handleTextMessageEvent(MessageEvent<TextMessageContent>)
}
interface org.derryclub.linebot.poker.analyzer.Hand {
~ HandAnalyzer getHandAnalyzer()
}
interface org.derryclub.linebot.commands.FunctionThrowable {
~ R apply(T)
}
class org.derryclub.linebot.Bootstrap {
+ {static} void main(String[])
}
class org.derryclub.linebot.game.Game {
- Deck deck
- int gameState
- int smallBlind
+ {static} int GAME_PREFLOP
+ {static} int GAME_FLOP
+ {static} int GAME_TURN_STATE
+ {static} int GAME_RIVER_STATE
+ {static} int GAME_OVER
+ {static} int GAME_ADDING_PLAYER
+ void setSmallBlind(int)
+ int getSmallBlind()
+ Deck getDeck()
+ int getGameState()
+ void setGameState(int)
+ boolean equals(Object)
+ int hashCode()
}
class org.derryclub.linebot.poker.analyzer.PokerHandClassifier {
- RankGroup rankGroup
- SuitGroup suitGroup
- SortedSet<Card> cards
+ Classification classify()
- SortedSet<Card> calculateHighCard()
- Classification isPair()
- Classification detectTwoPair()
- Classification isSet()
- Classification detectNormalStraight()
- SortedSet<Card> calculateStraight(List<Rank>)
- Classification detectWheel()
- Classification detectFlush()
- Classification detectFullHouse()
- {static} Collection<Card> extraFullHousePair(Iterator<Map.Entry<Rank,List<Card>>>)
- Card extraQuadKicker(Iterator<Map.Entry<Rank,List<Card>>>)
- Classification detectFourOfAKind()
- Classification detectStraightFlush()
- Classification detectStraightFlushWheel()
- Classification detectRoyalFlush()
- Classification detectImp()
- {static} void validateCards(SortedSet<Card>)
}
interface org.derryclub.linebot.commands.Command {
~ Optional<Command> findCommand(String)
~ String getDescription()
~ String getCommand()
~ List<String> getCommandList()
}
class org.derryclub.linebot.poker.analyzer.SuitGroup {
- Map<Suit,List<Card>> suitMap
+ Map<Suit,List<Card>> getSuitMap()
- {static} Map<Suit,List<Card>> initSuitGroup(SortedSet<Card>)
+ Iterator<Map.Entry<Suit,List<Card>>> iterator()
}
enum org.derryclub.linebot.card.Suit {
+  SPADE
+  HEART
+  DIAMOND
+  CLUB
- int suitValue
- char suitInitial
+ int getSuitValue()
+ char getSuitInitials()
+ String toString()
}
class org.derryclub.linebot.poker.analyzer.CardHandAnalyzer {
- SortedSet<Card> cards
- Classification handClassification
- RankGroup rankGroup
- SuitGroup suitGroup
+ SortedSet<Card> getCards()
+ Classification getClassification()
+ RankGroup getRankGroup()
+ SuitGroup getSuitGroup()
}
enum org.derryclub.linebot.commands.GameCommand {
+  HELP
+  DEAL
+  RESTART
+  DESTROY
+  SYSTEM
- String description
- String command
+ String getDescription()
+ String getCommand()
+ List<String> getCommandList()
+ {static} List<String> getGameCommandList()
+ Optional<Command> findCommand(String)
+ {static} GameCommand getGameCommand(String)
}
class org.derryclub.linebot.game.Player {
+ {static} int ALIVE
+ {static} int CHECK
+ {static} int FOLD
- String userID
- int position
- int chip
- Set<Card> playerCards
- Classification handClassification
- String userName
- int playerStatue
- int chipOnTheTable
+ int getChipOnTheTable()
- void addChipOnTheTable(int)
+ void clearChipOnTheTable()
+ void setCheck()
+ void foldHand()
+ int getPlayerStatue()
+ boolean equals(Object)
+ int hashCode()
+ String getUserName()
+ void setHandClassification(Classification)
+ Classification getHandClassification()
+ void addPlayerCards(Card)
+ Set<Card> getPlayerCards()
+ String toString()
+ String getUserID()
+ int getPosition()
+ void setPosition(int)
+ int getChip()
+ void setChip(int)
+ void bet(int)
+ void addChip(int)
}
class org.derryclub.linebot.commands.PreGameCommandReceiver {
- {static} Map<PreGameCommand,FunctionThrowable<MessageEvent<TextMessageContent>,Message>> pregameCmdMap
+ {static} Message handle(MessageEvent<TextMessageContent>)
- {static} void init()
+ {static} Map<PreGameCommand,FunctionThrowable<MessageEvent<TextMessageContent>,Message>> getPregameCmdMap()
}
class org.derryclub.linebot.processor.PokerAPIProcessor {
+ {static} SortedSet<Player> getGameResult(Set<Player>,List<Card>)
+ {static} String cardRankMsg(SortedSet<Player>)
}
class org.derryclub.linebot.processor.TablePosition {
+ {static} Set<Player> initPositionSetter(Set<Player>)
}
class org.derryclub.linebot.processor.LineAPIClient {
- {static} String token
- {static} LineMessagingClient client
+ {static} void pushHoleCards(String,String)
+ {static} String getUserName(String)
}
class org.derryclub.linebot.processor.GameCommandProcessor {
- {static} Map<GameCommand,FunctionThrowable<MessageEvent<TextMessageContent>,Message>> gameCommandMap
+ {static} Message handle(MessageEvent<TextMessageContent>)
- {static} void init()
}
class org.derryclub.linebot.processor.PotProcessor {
- {static} Map<String,Integer> gameClock
+ {static} void resetGameClock(String)
+ {static} String handle(Set<Player>,int,int,Map<Player,Integer>,String,Player)
+ {static} String handPreFlop(Set<Player>,int,int,Map<Player,Integer>,String,Player)
+ {static} void setSmallAndBigBlind(Set<Player>,Map<Player,Integer>,String)
+ {static} String handPreFlop2Players(Set<Player>,int,Map<Player,Integer>,String,Player)
+ {static} String handle2PlayerCheck(Set<Player>,int,Map<Player,Integer>,String,Player)
+ {static} int potDistribute(SortedSet<Player>,String)
}
class org.derryclub.linebot.poker.PokerHand {
- CardHandAnalyzer handAnalyzer
- {static} int POKER_HAND_SIZE
+ HandAnalyzer getHandAnalyzer()
}
class org.derryclub.linebot.poker.PokerHand.Builder {
- SortedSet<Card> cards
+ Builder addCard(Card)
+ PokerHand build()
}


org.derryclub.linebot.card.Comparable <|.. org.derryclub.linebot.card.Card
java.util.Comparator <|.. org.derryclub.linebot.poker.analyzer.PokerHandComparator
org.derryclub.linebot.poker.analyzer.Iterable <|.. org.derryclub.linebot.poker.analyzer.RankGroup
org.derryclub.linebot.poker.analyzer.HandClassifier <|.. org.derryclub.linebot.poker.analyzer.PokerHandClassifier
org.derryclub.linebot.poker.analyzer.Iterable <|.. org.derryclub.linebot.poker.analyzer.SuitGroup
org.derryclub.linebot.poker.analyzer.HandAnalyzer <|.. org.derryclub.linebot.poker.analyzer.CardHandAnalyzer
org.derryclub.linebot.poker.analyzer.Hand <|.. org.derryclub.linebot.poker.PokerHand
org.derryclub.linebot.poker.PokerHand +.. org.derryclub.linebot.poker.PokerHand.Builder
@enduml